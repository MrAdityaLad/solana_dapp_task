import Head from 'next/head'
import { Inter } from 'next/font/google'
import { Connection, PublicKey, Keypair } from "@solana/web3.js";
import { WalletContextState } from '@solana/wallet-adapter-react';
import { web3 } from "@project-serum/anchor";


const connection = new Connection("https://api.mainnet-beta.solana.com");

const mintAddress = new PublicKey("7512dgtZnhGDb5PFFd6ndN2sC9wgoYxm3pwxiMZqGzbv");

const ownerAddress = new PublicKey("94wVi7EVZbMe8w1KvCbzA7jMzDu6YNHY3qkFyubgZaM3");

const recipientAddress = new PublicKey("8MdXvWgNou9jRVturbfnt3egf1aP9p1AjL8wiJavti7F");

const privateKey = "24JQz5DJc6hxcP1iM9VxxXmNSXve93ycfBEftRin93rNeGHw1oj9qY9zrqXRYVnRokdoZhLQ63SVFeNCG1xB8mPT";








export default function Home() {
  const provider = new Keypair.fromSecretKey(Buffer.from(privateKey, "base64"));
const transferNFT = async () => {
  // Connect to the Solana network
  await connection.connect();

  // Get the NFT's token account associated with the owner address
  const associatedTokenAddress = await web3.Token.getAssociatedTokenAddress(
    web3.SYSVAR_CLOCK_PUBKEY,
    web3.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,
    mintAddress,
    ownerAddress
  );

  // Create the transfer instruction
  const transferInstruction = web3.Token.createTransferInstruction(
    web3.SPL_TOKEN_PROGRAM_ID,
    associatedTokenAddress,
    recipientAddress,
    provider.publicKey,
    [],
    1 // Number of NFTs to transfer
  );

  // Send the transaction to the Solana network
  const transaction = new web3.Transaction().add(transferInstruction);
  const signature = await web3.sendTransaction(connection, transaction, [wallet]);

  console.log(`Transaction ${signature} sent`);
};



const connectionToBlockchain = ()=>{

}



  const connectHandler=async()=>{

  }

  const sendNft=async()=>{
  // const ownerPublicKey = new PublicKey('/* owner public key */');
  // const tokenID = new PublicKey('/* NFT token ID */');
  transferNFT();



  }

  return (
    <>
      <Head>
        <title>Create</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <div >
       
          <div>
            <button type='button' onClick={connectHandler}>Connect</button>
           
          </div>
        </div>

        <div>
          <button type='button' onClick={sendNft}>send nft</button>
          
          
        </div>

       
      </main>
    </>
  )
}
















// // const inter = Inter({ subsets: ['latin'] })
// // import { TOKEN_PROGRAM_ID, Token, TOKEN_ACCOUNT_LAYOUT } from '@solana/spl-token';
// const connection = new Connection('https://api.mainnet-beta.solana.com');

// const getTokenAccount = async (owner, tokenAddress) => {
//   const associatedTokenAddress = await findAssociatedTokenAddress(owner, tokenAddress);
//   return associatedTokenAddress;
// };
// const findAssociatedTokenAddress = async (owner, tokenMintAddress) => {
//   return (
//       await PublicKey.findProgramAddress(
//           [
//               owner.toBuffer(),
//               TOKEN_PROGRAM_ID.toBuffer(),
//               tokenMintAddress.toBuffer(),
//           ],
//           ASSOCIATED_TOKEN_PROGRAM_ID
//       )
//   )[0];
// };
// const transferNFT = async () => {
//   const { wallet } = useContext<WalletContextState>(WalletContext);

//   const tokenAddress = new PublicKey('TOKEN_ADDRESS');
//   const recipientAddress = new PublicKey('RECIPIENT_ADDRESS');

//   const senderAssociatedTokenAccount = await getTokenAccount(wallet.publicKey, tokenAddress);
//   const senderTokenAccountBalance = await connection.getTokenAccountBalance(senderAssociatedTokenAccount);

//   const instructions = [
//       Token.createTransferInstruction(
//           TOKEN_PROGRAM_ID,
//           senderAssociatedTokenAccount,
//           recipientAddress,
//           wallet.publicKey,
//           [],
//           1
//       ),
//   ];

//   const transaction = new Transaction().add(...instructions);
//   const signature = await wallet.signTransaction(transaction);
//   await connection.sendRawTransaction(signature.serialize());
// };
